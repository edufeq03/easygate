# A versão 3.8 é a mais recente e oferece funcionalidades aprimoradas.
version: '3.8'

services:
  # Serviço da sua aplicação Flask
  web:
    # Indica ao Docker para construir a imagem a partir do Dockerfile neste diretório
    build: .
    # Garante que o contêiner será reiniciado automaticamente em caso de falha
    restart: always
    # Define o comando que será executado ao iniciar o contêiner.
    # Isso sobrepõe o CMD no Dockerfile e é uma boa prática para produção.
    command: gunicorn --bind 0.0.0.0:5001 --workers 3 --worker-class geventwebsocket.gunicorn.workers.GeventWebSocketWorker run:app
    # Mapeia a porta 5001 do seu servidor para a porta 5001 do contêiner
    ports:
      - "5001:5001"
    # Define variáveis de ambiente para o contêiner
    environment:
      # A string de conexão do banco de dados usa o nome do serviço 'db' como o host
      # e variáveis de ambiente que serão lidas do seu arquivo .env
      DATABASE_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}"
    # Garante que o serviço 'web' só inicie após o serviço 'db' estar pronto
    depends_on:
      - db

  # Serviço do banco de dados PostgreSQL
  db:
    # Usa a versão 14 do PostgreSQL, mais recente que a 13.
    image: postgres:14-alpine
    # O nome do contêiner é opcional e, em geral, é melhor deixar que o Docker o gere.
    # Isso evita conflitos de nome caso você execute outros projetos no mesmo servidor.
    # container_name: motoboy_postgres
    restart: always
    environment:
      # As credenciais do banco de dados são lidas do arquivo .env
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    # Mapeia a porta 5432 do contêiner para a porta 5432 do seu servidor
    ports:
      - "5432:5432"
    volumes:
      # Persiste os dados do banco de dados em um volume nomeado do Docker
      - postgres_data:/var/lib/postgresql/data

volumes:
  # Declara o volume nomeado que será usado para o banco de dados
  postgres_data: